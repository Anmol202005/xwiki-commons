[
  {
    "extension": "revapi.filter",
    "configuration": {
      "elements" : {
        // Note that we currently don't include non-XWiki classes in the checks, the reason being that
        // third-party deps break backward-compat or source compat all the time and we would need to have
        // excludes all the time. So we currently trust them that the breakages are not real breakages
        // that will affect us. We should probably improve this in the future.
        "include": [
          {
            "matcher": "java",
            "match": "type ^org.xwiki.** {}"
          },
          {
            "matcher": "java",
            "match": "type ^com.xpn.xwiki.** {}"
          }
        ],
        "exclude": [
          {
            "matcher": "java",
            "match": "type ^org.xwiki.**.internal.** {}"
          },
          {
            "matcher": "java",
            "match": "type ^org.xwiki.**.test.** {}"
          },
          {
            "matcher": "java",
            "match": "type ^com.xpn.xwiki.**.internal.** {}"
          },
          {
            "matcher": "java",
            "match": "@org.xwiki.stability.Unstable ^*;"
          }
        ]
      }
    }
  },
  {
    "extension": "revapi.differences",
    "configuration": {
      "differences": [
        {
          "regex": true,
          "ignore": true,
          "code": "java.annotation.(added|removed)",
          "annotationType": "java\\.lang\\.SafeVarargs",
          "justification": "Not a breakage. Indicates that the body of the annotated method or constructor does not perform potentially unsafe operations on its varargs parameter. It has no semantic consequences."
        },
        {
          // The "externalClassExposedInAPI" check is used to detect code smells. It's documented as:
          // "This is reported for classes from dependencies that are exposed in the API (for example as a
          // return value). This is generally discouraged practice because it makes updating the dependency
          // version a more complex task (you want a bugfix but you donâ€™t want the changed API to leak to your
          // users)."
          // In the case of XWiki it's not a problem because we release all modules together using the same
          // versioning. However we still want to detect this for non XWiki classes.
          "regex": true,
          "ignore": true,
          "code": "java\\.class\\.externalClassExposedInAPI",
          "package": "org\\.xwiki\\..*",
          "justification": "Dragging of other XWiki types to the API is OK."
        },
        // Same rule for the old com.xpn.xwiki package.
        {
          "regex": true,
          "ignore": true,
          "code": "java\\.class\\.externalClassExposedInAPI",
          "package": "com\\.xpn\\.xwiki\\..*",
          "justification": "Dragging of other XWiki types to the API is OK."
        },
        {
          // We reclassify all source compatibility checks to be of EQUIVALENT severity so that the build doesn't fail
          // on source incompatibilities since we're only interested in binary and (some) semantic incompatibilities.
          // As we break on potentiallyBreaking severity, issues with equivalent severity won't stop the build.
          "regex": true,
          "code": ".*",
          "classify": {
            "SOURCE": "EQUIVALENT"
          }
        }
      ]
    }
  }
]
